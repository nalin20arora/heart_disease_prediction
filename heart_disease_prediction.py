# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VZxQseixTOE9oeVP1w-OWHl1mJB2JWex

Import the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection and processing"""

# loading the csv data to a pandas dataframe 
heart_data = pd.read_csv('/content/heart_disease_data.csv')

# print first five rows of the dataset
heart_data.head()

# print last five rows of the dataset
heart_data.tail()

# number of rows and columns in the dataset
heart_data.shape

#getting some info about the data
heart_data.info()

# checking for missing values
heart_data.isnull().sum()

# statistical measures of the data
heart_data.describe()

#checking the distribution of target variable
heart_data['target'].value_counts()

"""1--> defective heart
2--> healthy heart

Splitting the features and target
"""

X = heart_data.drop(columns = 'target', axis = 1)
Y = heart_data['target']

print(X)

print(Y)

"""Splitting the data into training data and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify = Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model training"""

#Logistic regression model
model = LogisticRegression()

#training the logistic regression model with training data
model.fit(X_train, Y_train)

#model evaluation
#accuracy score on training data -->
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,  Y_train)

print('Accuracy on training data ; ', training_data_accuracy)

#accuracy on test data -->
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,  Y_test)

print('Accuracy on Test Data ; ', test_data_accuracy)

"""Building a predicting system"""

input_data = (62,0,0,140,268,0,0,160,0,3.6,0,2,2)
#change input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)
#reshaping the numpy array as we are predicting for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0] == 0):
  print('The person does not have any heart disease')
else:
  print('The person is having heart disease')